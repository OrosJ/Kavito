import axios from 'axios';
import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';

const URI = 'http://localhost:8000/products/';

const CompEditProduct = () => {
  // Obtén el id del producto desde la URL
  const { id } = useParams();
  const navigate = useNavigate();

  // Estado para manejar los datos del formulario
  const [descripcion, setDescripcion] = useState('');
  const [cantidad, setCantidad] = useState('');
  const [precio, setPrecio] = useState('');
  const [error, setError] = useState('');

  // useEffect para obtener los datos del producto a editar
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        // Realizamos una solicitud GET para obtener el producto por su id
        const response = await axios.get(`${URI}${id}`);
        // Asignamos los datos del producto a los estados
        const { descripcion, cantidad, precio } = response.data;
        setDescripcion(descripcion);
        setCantidad(cantidad);
        setPrecio(precio);
      } catch (error) {
        setError('No se pudo cargar el producto');
      }
    };

    fetchProduct();
  }, [id]); // Dependencia en `id` para volver a ejecutar cuando el id cambie

  // Función para manejar la actualización del producto
  const updateProduct = async (e) => {
    e.preventDefault();
    setError(''); // Limpiar errores previos

    // Validación básica
    if (!descripcion || !cantidad || !precio) {
      setError('Por favor, completa todos los campos.');
      return;
    }

    if (cantidad <= 0 || isNaN(cantidad)) {
      setError('La cantidad debe ser un número válido mayor que 0.');
      return;
    }

    if (precio <= 0 || isNaN(precio)) {
      setError('El precio debe ser un número válido mayor que 0.');
      return;
    }

    try {
      // Realizamos la solicitud PUT para actualizar el producto
      const response = await axios.put(`${URI}${id}`, { descripcion, cantidad, precio });
      
      // Si la actualización es exitosa, mostramos un mensaje de éxito
      alert('Producto actualizado correctamente!');
      navigate('/');  // Redirige al home después de actualizar
    } catch (error) {
      console.error('Error al actualizar el producto:', error);
      setError('Hubo un error al actualizar el producto.');
    }
  };

  return (
    <div className="container mt-4">
      <h1>Editar Producto</h1>
      <form onSubmit={updateProduct}>
        <div className="mb-3">
          <label className="form-label">Descripción del producto:</label>
          <textarea
            value={descripcion}
            onChange={(e) => setDescripcion(e.target.value)}
            className="form-control"
            placeholder="Escribe la descripción del producto"
          />
        </div>

        <div className="mb-3">
          <label className="form-label">Cantidad:</label>
          <input
            type="number"
            value={cantidad}
            onChange={(e) => setCantidad(e.target.value)}
            className="form-control"
            placeholder="Cantidad del producto"
          />
        </div>

        <div className="mb-3">
          <label className="form-label">Precio:</label>
          <input
            type="number"
            value={precio}
            onChange={(e) => setPrecio(e.target.value)}
            className="form-control"
            placeholder="Precio del producto"
            step="0.01"
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}

        <button type="submit" className="btn btn-success">Actualizar Producto</button>
      </form>
    </div>
  );
};

export default CompEditProduct;
